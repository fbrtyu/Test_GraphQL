package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"ozon-test/database"
	"ozon-test/graph/model"
	"ozon-test/localdatabase"
	"ozon-test/subscription"
	switchdb "ozon-test/switchDB"
)

var db = database.ConnectPG()

// Создание нового пользователя и запись его данных в БД
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.CreateUserInput) (*model.User, error) {
	if switchdb.SwitchdbAnswer == "B" {
		return db.CreateUser(input), nil
	} else {
		return localdatabase.CreateUser(input), nil
	}
}

// Создание нового поста и запись в БД
func (r *mutationResolver) CreatePost(ctx context.Context, userid int, input *model.CreatePostInput) (*model.Post, error) {
	if switchdb.SwitchdbAnswer == "B" {
		return db.CreatePost(userid, input), nil
	} else {
		return localdatabase.CreatePost(userid, input), nil
	}
}

// Создание комментария к посту и запись в БД
func (r *mutationResolver) CreateComment(ctx context.Context, userid int, postid int, input *model.CreateCommentInput) (*model.Comment, error) {
	if switchdb.SwitchdbAnswer == "B" {
		newcomment := subscription.NewComment{}
		newcomment.Text = input.Text
		subscription.Publicch <- newcomment
		return db.CreateComment(userid, postid, input), nil
	} else {
		return localdatabase.CreateComment(userid, postid, input), nil
	}
}

// Создание комментария, который будет являться ответом на уже существующий комментарий. Запись данных в БД
func (r *mutationResolver) CreateAnswer(ctx context.Context, userid int, postid int, commentid int, input *model.CreateCommentInput) (*model.Comment, error) {
	if switchdb.SwitchdbAnswer == "B" {
		comment := db.CreateComment(userid, postid, input)
		return db.CreateAnswer(postid, commentid, *comment.ID, input), nil
	} else {
		return localdatabase.CreateAnswer(userid, postid, commentid, input), nil
	}
}

// Получение данных из БД, список постов
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	fmt.Println(switchdb.SwitchdbAnswer)
	if switchdb.SwitchdbAnswer == "B" {
		return db.Post(), nil
	} else {
		return localdatabase.Posts(), nil
	}
}

// Получение данных из БД для вывода определенного поста и всех комментариев
func (r *queryResolver) Post(ctx context.Context, id int) (*model.Post, error) {
	if switchdb.SwitchdbAnswer == "B" {
		return db.PostAndComments(id), nil
	} else {
		return localdatabase.PostAndComments(id), nil
	}
}

// Comment is the resolver for the comment field.
func (r *subscriptionResolver) Comment(ctx context.Context) (<-chan *model.Comment, error) {
	return subscription.Subonpost(ctx), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Подписка на получение комментариев
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
